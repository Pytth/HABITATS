}
#Liste de mot dans ma phrase
mots = mots[unlist(lapply(mot, function(x) test_vide(x)))]
grepl("^\\w+\\.$", mots[1])
grepl("^\\w+\\.$", mots[5])
grepl("^\\w+\\.$", mots[6])
sub("^([A-Z]+)\\.$", "\\1", mot[6])
sub("^([A-Z]+)\\.$", "\\1", mots[6])
grepl("^\\w+\\.$", mots[6])
gsub("^([A-Z]+)\\s+.*", "\\1", mots)
gsub("^([A-Z]+)\\s+.*", "\\1", mots[6])
# Fonction pour détecter et corriger les abréviations de genre dans une phrase
detecter_et_corriger_abreviation_phrase <- function(phrase) {
mots <- strsplit(phrase, " ")[[1]]
genre_precedent <- NULL
for (i in seq_along(mots)) {
mot <- mots[i]
# Utilisation d'une expression régulière pour détecter les abréviations de genre
if (grepl("^\\w+\\.$", mot)) {
# Extraire l'abréviation de genre
abrev_genre <- gsub("^([A-Z]+)\\.$", "\\1", mot)
# Corriger l'abréviation en utilisant le genre précédent
if (!is.null(genre_precedent)) {
mots[i] <- paste(genre_precedent, gsub("^[A-Z]+\\.$", "", mot), sep = " ")
}
} else {
# Mettre à jour le genre précédent si le mot n'est pas une abréviation
genre_precedent <- gsub("^([A-Z]+)\\s+.*", "\\1", mot)
}
}
return(paste(mots, collapse = " "))
}
# Liste de phrases avec des noms d'espèces
phrases <- c("Nardus stricta est une plante.",
"Achillea ptarmica subsp. pyrenaica est une autre espèce.",
"Gentiana alpina, G. pyrenaica, et Hieracium lactucella sont des exemples.")
# Appliquer la fonction sur la liste de phrases
phrases_corrigees <- sapply(phrases, detecter_et_corriger_abreviation_phrase)
phrases_corrigees
if (!require("stringr")) {install.packages("stringr")}+library("stringr")
str_detect("^[A-Z]",mots)
str_detect(mots,"^[A-Z]")
mot_Genre = str_detect(mots,"^[A-Z]")
mot_Genre = mots[str_detect(mots,"^[A-Z]")]
mot_Genre
phrase = "Nardus stricta, Achillea ptarmica subsp. pyrenaica, A. rupestris subsp. r.,
Carex umbrosa subsp. huetiana, Epikeros pyrenaeus (= Selinum pyrenaeum), Euphrasia minima subsp. m.,
Gentiana alpina, G. pyrenaica, Hieracium lactucella, Pedicularis pyrenaica, Ranunculus pyrenaeus, Trifolium alpinum,
Selaginella selaginoides"
mots = strsplit(phrase, " |,|\n")[[1]]
mots
test_vide <- function(x) {
return(nchar(x) != 0)
}
mot_Genre = mots[str_detect(mots,"^[A-Z]")]
str_detect("^[A-Z]",mots)
str_detect(mots,"^[A-Z]")
if (!require("stringr")) {install.packages("stringr")}+library("stringr")
str_detect(mots,"^[A-Z]")
lastGenre = NULL
for (i in lenght(mots)) {
if(str_detect(mots[i],"^[A-Z]") = TRUE){
for (i in lenght(mots)) {
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
}
for (i in length(mots)) {
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
}
mots
i = 1
str_detect(mots[i],"^[A-Z]")
lastGenre = mots[i]
str_detect(mots[i],"^[A-Z]\\.$")
i = 2
str_detect(mots[i],"^[A-Z]")
str_detect(mots[3],"^[A-Z]\\.$"
)
i = 35
i = 32
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
i = 35
str_detect(mots[i],"^[A-Z]\\.$")
mots[i] = lastGenre
mots
phrase = "Nardus stricta, Achillea ptarmica subsp. pyrenaica, A. rupestris subsp. r.,
Carex umbrosa subsp. huetiana, Epikeros pyrenaeus (= Selinum pyrenaeum), Euphrasia minima subsp. m.,
Gentiana alpina, G. pyrenaica, Hieracium lactucella, Pedicularis pyrenaica, Ranunculus pyrenaeus, Trifolium alpinum,
Selaginella selaginoides"
mots = strsplit(phrase, " |,|\n")[[1]]
for (i in length(mots)) {
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
}
mots
for (i in length(mots)) {
cat(mots[i],"\n",
"Genre ?",str_detect(mots[i],"^[A-Z]"),"\n")
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
}
for (i in 1:length(mots)) {
cat(mots[i],"\n",
"Genre ?",str_detect(mots[i],"^[A-Z]"),"\n")
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
}
mots
length(mots)
for (i in 1:length(mots)) {
cat(mots[i],"\n",
"Genre ? :",str_detect(mots[i],"^[A-Z]"),"\n,",
"Genre abbrégé ? :",str_detect(mots[i],"^[A-Z]\\.$"),"\n")
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
}
mots = strsplit(phrase, " |,|\n")[[1]]
for (i in 1:length(mots)) {
cat(mots[i],"\n",
"Genre ? :",str_detect(mots[i],"^[A-Z]"),"\n,",
"Genre abbrégé ? :",str_detect(mots[i],"^[A-Z]\\.$"),"\n \n")
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
}
for (i in 1:length(mots)) {
cat(mots[i],"\n",
"Genre ? :",str_detect(mots[i],"^[A-Z]"),"\n,",
"Genre abbrégé ? :",str_detect(mots[i],"^[A-Z]\\.$"),"\n \n")
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
}
mots
str_detect(mots[i],"\\.$")
str_detect(mots,"\\.$")
lastAdjectif = NULL
str_detect(mots,"^[a-z]\\.$")
mots = strsplit(phrase, " |,|\n")[[1]]
for (i in 1:length(mots)) {
#Traitement des genres
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
#Traitement des infrataxons
if(str_detect(mots[i],"\\.$") == FALSE){
lastAdjectif = mots[i]
}
if(str_detect(mots[i],"^[a-z]\\.$") == TRUE){
mots[i] = lastAdjectif
}
}
mots
any(str_detect(TAXREFv16_FLORE_FR$LB_NOM, TYPO_PVF2_70$COMBINAISON_ESPECES[14]))
library(readxl)
TYPO_PVF2_70_corrige <- read_excel("D:/Github/HABITATS/01_REF/PVF2/TYPO_PVF2_70_corrige.xlsx",
sheet = "TYPO_PVF2_70")
View(TYPO_PVF2_70_corrige)
###############Creation TYPO_PVF2_70_corrige
TYPO_PVF2_70_corrige <- read_excel("D:/Github/HABITATS/01_REF/PVF2/TYPO_PVF2_70_corrige.xlsx",
sheet = "TYPO_PVF2_70")
paste0(mots)
paste0(mots)
paste(mots,collapse = " ")
for(j in 1:nrow(TYPO_PVF2_70_corrige)){
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
lastGenre = NULL
lastAdjectif = NULL
for (i in 1:length(mots)) {
#Traitement des genres
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
#Traitement des infrataxons
if(str_detect(mots[i],"\\.$") == FALSE){
lastAdjectif = mots[i]
}
if(str_detect(mots[i],"^[a-z]\\.$") == TRUE){
mots[i] = lastAdjectif
}
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j] = paste(mots,collapse = " ")
}
j = 1
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
mots
str_detect(mots[i],"^[A-Z]\\.$")
cat("Ligne : ",j,"\n")
for(j in 1:nrow(TYPO_PVF2_70_corrige)){
cat("Ligne : ",j,"\n")
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
lastGenre = NULL
lastAdjectif = NULL
for (i in 1:length(mots)) {
#Traitement des genres
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
#Traitement des infrataxons
if(str_detect(mots[i],"\\.$") == FALSE){
lastAdjectif = mots[i]
}
if(str_detect(mots[i],"^[a-z]\\.$") == TRUE){
mots[i] = lastAdjectif
}
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j] = paste(mots,collapse = " ")
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j]
for(j in 1:nrow(TYPO_PVF2_70_corrige)){
cat("Ligne : ",j,"\n")
if(is.na(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j])){
next
}
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
lastGenre = NULL
lastAdjectif = NULL
for (i in 1:length(mots)) {
#Traitement des genres
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
#Traitement des infrataxons
if(str_detect(mots[i],"\\.$") == FALSE){
lastAdjectif = mots[i]
}
if(str_detect(mots[i],"^[a-z]\\.$") == TRUE){
mots[i] = lastAdjectif
}
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j] = paste(mots,collapse = " ")
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j]
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
str_detect(mots[i],"^[A-Z]\\.$")
mots[i] = lastGenre
mots[i]
for(j in 1:nrow(TYPO_PVF2_70_corrige)){
cat("Ligne : ",j,"\n")
if(is.na(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j])){
next
}
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
lastGenre = ERREUR
lastAdjectif = ERREUR
for (i in 1:length(mots)) {
#Traitement des genres
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
#Traitement des infrataxons
if(str_detect(mots[i],"\\.$") == FALSE){
lastAdjectif = mots[i]
}
if(str_detect(mots[i],"^[a-z]\\.$") == TRUE){
mots[i] = lastAdjectif
}
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j] = paste(mots,collapse = " ")
}
for(j in 1:nrow(TYPO_PVF2_70_corrige)){
cat("Ligne : ",j,"\n")
if(is.na(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j])){
next
}
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
lastGenre = "ERREUR"
lastAdjectif = "ERREUR"
for (i in 1:length(mots)) {
#Traitement des genres
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
#Traitement des infrataxons
if(str_detect(mots[i],"\\.$") == FALSE){
lastAdjectif = mots[i]
}
if(str_detect(mots[i],"^[a-z]\\.$") == TRUE){
mots[i] = lastAdjectif
}
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j] = paste(mots,collapse = " ")
}
View(TYPO_PVF2_70_corrige)
###############Creation TYPO_PVF2_70_corrige
TYPO_PVF2_70_corrige <- read_excel("D:/Github/HABITATS/01_REF/PVF2/TYPO_PVF2_70_corrige.xlsx",
sheet = "TYPO_PVF2_70")
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES_CORR = NA
###############Creation TYPO_PVF2_70_corrige
TYPO_PVF2_70_corrige <- read_excel("D:/Github/HABITATS/01_REF/PVF2/TYPO_PVF2_70_corrige.xlsx",
sheet = "TYPO_PVF2_70")
#Inition la typologie corrige
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES_CORR = NA
View(TYPO_PVF2_70_corrige)
#Boucle de correction
for(j in 1:nrow(TYPO_PVF2_70_corrige)){
cat("Ligne : ",j,"\n")
if(is.na(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j])){
next
}
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
lastGenre = "ERREUR"
lastAdjectif = "ERREUR"
for (i in 1:length(mots)) {
#Traitement des genres
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
#Traitement des infrataxons
if(str_detect(mots[i],"\\.$") == FALSE){
lastAdjectif = mots[i]
}
if(str_detect(mots[i],"^[a-z]\\.$") == TRUE){
mots[i] = lastAdjectif
}
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES_CORR[j] = paste(mots,collapse = " ")
}
#TYPO_PVF2_70 <- read_excel("../TYPO_PVF2_70_corrige.xlsx", sheet = "TYPO_PVF2_70")
TYPO_PVF2_70 = TYPO_PVF2_70_corrige
#TAXREFv16
TAXREFv16_FLORE_FR = read.csv("TAXREFv16_FLORE_FR.csv",fileEncoding = "UTF-8")
# On conserve que les RANG especes, sous especes et variete
TAXREFv16_FLORE_FR = TAXREFv16_FLORE_FR[TAXREFv16_FLORE_FR$RANG %in% c("ES", "SSES", "VAR"),]
# Amorcage du tableau ? remplir
TAB_ESP_PVF2 = data.frame(CD_HAB = character(0),LB_CODE= character(0),LB_HAB_FR=character(0),CD_NOM=character(0),LB_NOM=character(0))
# Boucle de rattachement TAXREF - PVF2 avec affichage
for(i in 1:nrow(TYPO_PVF2_70)){
resultats <- sapply(TAXREFv16_FLORE_FR$LB_NOM, function(x) grepl(x,TYPO_PVF2_70$COMBINAISON_ESPECES_CORR[i]))
TAXREFv16_FLORE_FR[resultats,]$LB_NOM
cat("PVF2 ligne : ",i,"\n")
if(nrow(data.frame(TAXREFv16_FLORE_FR[resultats,]$LB_NOM))>0){
TAB_TEMP = data.frame(CD_HAB = TYPO_PVF2_70$CD_HAB[i],LB_CODE= TYPO_PVF2_70$LB_CODE[i],LB_HAB_FR=TYPO_PVF2_70$LB_HAB_FR[i],CD_NOM=TAXREFv16_FLORE_FR[resultats,]$LB_NOM,LB_NOM=TAXREFv16_FLORE_FR[resultats,]$CD_REF)
TAB_ESP_PVF2 = rbind(TAB_ESP_PVF2,TAB_TEMP)
}
}
View(TAB_TEMP)
View(TAB_ESP_PVF2)
View(TAB_TEMP)
View(TAXREFv16_FLORE_FR)
View(TYPO_PVF2_70_corrige)
# Enregistrement en XLSX
write.xlsx(TYPO_PVF2_70_corrige,"TYPO_PVF2_70_corrige.xlsx")
if (!require("xlsx")) {install.packages("xlsx")}+library("xlsx")
# Enregistrement en XLSX
write.xlsx(TYPO_PVF2_70_corrige,"TYPO_PVF2_70_corrige.xlsx")
install.packages("rJava")
install.packages("xlsx")
if (!require("xlsx")) {install.packages("xlsx")}+library("xlsx")
install.packages("rJava")
install.packages("xlsx")
if (!require("xlsx")) {install.packages("xlsx")}+library("xlsx")
library(rJava)
remove.packages("rJava")
install.packages("rJava")
library(rJava)
detach("package:rJava", unload = TRUE)
library(rJava)
detach("package:rJava", unload = TRUE)
install.packages("C:/Users/augus/Downloads/rJava-master.zip", repos = NULL, type = "win.binary")
livrary(rJava)
library(rJava)
install.packages("xlsx")
if (!require("xlsx")) {install.packages("xlsx")}+library("xlsx")
if (!require("xlsx")) {install.packages("xlsx")}+library("xlsx")
# Librairies
if (!require("readxl")) {install.packages("readxl")}+library("readxl") # API GBIF
if (!require("xlsx")) {install.packages("xlsx")}+library("xlsx")
###############Creation TYPO_PVF2_70_corrige
TYPO_PVF2_70_corrige <- read_excel("D:/Github/HABITATS/01_REF/PVF2/TYPO_PVF2_70_corrige.xlsx",
sheet = "TYPO_PVF2_70")
#Inition la typologie corrige
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES_CORR = NA
#Boucle de correction
for(j in 1:nrow(TYPO_PVF2_70_corrige)){
cat("Ligne : ",j,"\n")
if(is.na(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j])){
next
}
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
lastGenre = "ERREUR"
lastAdjectif = "ERREUR"
for (i in 1:length(mots)) {
#Traitement des genres
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
#Traitement des infrataxons
if(str_detect(mots[i],"\\.$") == FALSE){
lastAdjectif = mots[i]
}
if(str_detect(mots[i],"^[a-z]\\.$") == TRUE){
mots[i] = lastAdjectif
}
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES_CORR[j] = paste(mots,collapse = " ")
}
# Enregistrement en XLSX
write.csv(TYPO_PVF2_70_corrige,"TYPO_PVF2_70_corrige.csv",fileEncoding = "UTF-8",row.names = F)
#TYPO_PVF2_70 <- read_excel("../TYPO_PVF2_70_corrige.xlsx", sheet = "TYPO_PVF2_70")
TYPO_PVF2_70 = TYPO_PVF2_70_corrige
#TAXREFv16
TAXREFv16_FLORE_FR = read.csv("TAXREFv16_FLORE_FR.csv",fileEncoding = "UTF-8")
# On conserve que les RANG especes, sous especes et variete
TAXREFv16_FLORE_FR = TAXREFv16_FLORE_FR[TAXREFv16_FLORE_FR$RANG %in% c("ES", "SSES", "VAR"),]
if (!require("stringr")) {install.packages("stringr")}+library("stringr")
#Boucle de correction
for(j in 1:nrow(TYPO_PVF2_70_corrige)){
cat("Ligne : ",j,"\n")
if(is.na(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j])){
next
}
mots = strsplit(TYPO_PVF2_70_corrige$COMBINAISON_ESPECES[j], " |,|\n")[[1]]
lastGenre = "ERREUR"
lastAdjectif = "ERREUR"
for (i in 1:length(mots)) {
#Traitement des genres
if(str_detect(mots[i],"^[A-Z]\\.$") == TRUE){
mots[i] = lastGenre
}
if(str_detect(mots[i],"^[A-Z]") == TRUE){
lastGenre = mots[i]
}
#Traitement des infrataxons
if(str_detect(mots[i],"\\.$") == FALSE){
lastAdjectif = mots[i]
}
if(str_detect(mots[i],"^[a-z]\\.$") == TRUE){
mots[i] = lastAdjectif
}
}
TYPO_PVF2_70_corrige$COMBINAISON_ESPECES_CORR[j] = paste(mots,collapse = " ")
}
# Enregistrement en XLSX
write.csv(TYPO_PVF2_70_corrige,"TYPO_PVF2_70_corrige.csv",fileEncoding = "UTF-8",row.names = F)
#TYPO_PVF2_70 <- read_excel("../TYPO_PVF2_70_corrige.xlsx", sheet = "TYPO_PVF2_70")
TYPO_PVF2_70 = TYPO_PVF2_70_corrige
#TAXREFv16
TAXREFv16_FLORE_FR = read.csv("TAXREFv16_FLORE_FR.csv",fileEncoding = "UTF-8")
# On conserve que les RANG especes, sous especes et variete
TAXREFv16_FLORE_FR = TAXREFv16_FLORE_FR[TAXREFv16_FLORE_FR$RANG %in% c("ES", "SSES", "VAR"),]
# Amorcage du tableau ? remplir
TAB_ESP_PVF2 = data.frame(CD_HAB = character(0),LB_CODE= character(0),LB_HAB_FR=character(0),CD_NOM=character(0),LB_NOM=character(0))
# Boucle de rattachement TAXREF - PVF2 avec affichage
for(i in 1:nrow(TYPO_PVF2_70)){
resultats <- sapply(TAXREFv16_FLORE_FR$LB_NOM, function(x) grepl(x,TYPO_PVF2_70$COMBINAISON_ESPECES_CORR[i]))
TAXREFv16_FLORE_FR[resultats,]$LB_NOM
cat("PVF2 ligne : ",i,"\n")
if(nrow(data.frame(TAXREFv16_FLORE_FR[resultats,]$LB_NOM))>0){
TAB_TEMP = data.frame(CD_HAB = TYPO_PVF2_70$CD_HAB[i],LB_CODE= TYPO_PVF2_70$LB_CODE[i],LB_HAB_FR=TYPO_PVF2_70$LB_HAB_FR[i],CD_NOM=TAXREFv16_FLORE_FR[resultats,]$LB_NOM,LB_NOM=TAXREFv16_FLORE_FR[resultats,]$CD_REF)
TAB_ESP_PVF2 = rbind(TAB_ESP_PVF2,TAB_TEMP)
}
}
# Enregistrement en XLSX
write.csv(TAB_ESP_PVF2,"TAB_ESP_PVF2.csv",fileEncoding = "UTF-8",row.names = F)
